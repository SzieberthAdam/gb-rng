BACKGROUND AND PLANNING                               2018-12-19
=======================                               2018-12-24

Recently  I finished the prototyping of my first ever game named
Octaloop in LÖVE. I planned it for the DMG right from the start:
The  Game Boy  is probably the most successful  handheld console
ever made with hundreds of millions of units sold,  most of them
are probably still in  working condition  boxed and stored some‐
where  in the home almost forgotten.  It is inexpensive.  It has
AA/AAA batteries which I prefer over the expensive, specific and
short lasting Li-ion ones.  The GB is robust and durable. In ad‐
dition  I think that most of the greatest games are the simplest
ones.

I watched the awesome Ultimate Game Boy Talk video ([ULTIMTALK])
and read some development texts, understand the basics and wrote
my  Hello World program,  the next step would be to  have an RNG
for my game. After I did some research I realized that from this
point on I am on my own.  There are no docs nor exmples of GBZ80
RNGs on the internet.

I copied  the RNG used in  2048-gb ([2048-GB]) and made an ASCII
characterset  tilemap and generated  1kB of random bytes  to the
VRAM ($9800--$9BFF)  to see the  data on screen.  It was clearly
not random.  That 2048-gb RNG uses an  8 bit seed which is  then
XOR'ed  with the  Divider Register  value and  the result is re‐
turned in A.  The RNG routine gets called  mainly in the  Vblank
handler and the randomness of the user input does not contribute
to the seed.  That RNG might be fine for the 2048 game but I re‐
qured a better one.

But how would  I know that my RNG is good?  I read about random‐
ness tests and attempted to do the  Diehard tests  with the  1kB
data I had. Naturally it was under the size limit. I came to the
conclusion that  I have to  transfer  at least  30MB data on the
link cable to a PC to be able to test my RNG. I ordered two link
cables from the internet and bought a parallel cable in the flea
market to be able to do that soon.

However, I want to develop my game in the first place so at this
point  I am fine with a decent RNG  which  produce a random-like
screen and  memory dump.   And this defined the  first milestone
(1.0) of GB-RNG and makes the  data transfer feature  the second
milestone (2.0).

For  1.0  I want my main file do some initializaton for optional
use by the  attached RNGs.  "Note that  GameBoy  internal RAM on
power up contains random data. All of the GameBoy emulators tend
to set all RAM to value $00 on entry. Cart RAM the first time it
is accessed on a real GameBoy contains random data. It will only
contain known data if the  GameBoy  code initializes it to  some
value." [PD]  This means that the  Game Boy  has a  nice entropy
stored in its RAM after power up.

I decided to extract this randomness into a  256 bytes long area
on the RAM ($DF00--$DFFF) as part of the initialization process.
But as there are  many ways to do it,  the extractor  subroutine
used  should be  also attached  from a separate file.  It should
have its  subroutine  under the label "extractor" and should ex‐
tract (BC) bytes  into the area  starting from (DE).  My initial
extractor will be doing a simple XOR loop on the target area.

The visual representation  will be a little modified CP437 print
of the RNG generated 360 bytes long data on the  20×18  tiles of
the Game Boy display.

$00 and $FF will have special tiles  which make them differently
form the whitespace and the other.



[2048-GB]   Sanqui et al.: 2048-gb (GAME)                        https://gbhh.avivace.com/game/2048gb
[PD]        Martin Korth et al.: Pan Docs                        http://gbdev.gg8.se/wiki/articles/Pan_Docs
[ULTIMTALK] Michael Steil: The Ultimate Game Boy Talk (VIDEO)    https://media.ccc.de/v/33c3-8029-the_ultimate_game_boy_talk